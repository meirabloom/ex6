abigail.s
meira.bloom

=============================
=      File description     =
=============================
Sjavac.java - The main class that runs the verifier
InitialParser.java - Receives a file and reads it line by line, adding each line to a linked list of strings,
                     excluding comment lines and empty lines.
BlockParser.java - A class that iterates over the linked list of code string lines and parses them into
                   block objects according to their type
GlobalBlock.java - A class that represents the main block in the code to be verified. It's variables are
                   global variables.
Block.java - An abstract class representing a a block of code- the first line in the block contains an opening
             curly bracket, the last line is simply a closing curly bracket, and everything in the block is
             the scope.
VariableFactory.java - A class that receives a list of strings, each line representing a variable, and creates
                       Variable objects occording to the strings specifications.
Variable.java - A class representing the variable objects. Each variable has a name, the option of being
                assigned a value and knows whether or not a value has been assigned , its type, and whether or
                not it is final or global.
MethodParser.java - A class that receives a linked list of strings representing the Method block, ensures the
                    methods validity and extracts its variables. if it is a call to the method, ensures the
                    call is legal.
MethodBlock.java - A class representing the method block
ConditionBlock.java - A class representing the condition block objects. (if and while loops)
sJavaException.java - receives a string specifying the reason for the error, and throws an exception with the
                      explanation message



=============================================
=     Design and Implementation details     =
=============================================
The Sjavac class runs the program. It has a main method that implements try-catch: if the file containing the
code to be verified is corrupt/ the program receives a bad path, an IO exception is thrown, and "2" is
printed. if the file contains illegal code, an sJavaException is thrown with a message specifying the reason,
and "1" is printed. If the verifier finishes it's run uninterrupted, the code contained in the file is
pronounced legal by "0" being printed.
the verifying process:
The code is sent to the Initial parser class, which reads the code and adds each line that isn't empty/ not a
comment line, into a linked list of strings. A global block object is created with the list of lines, and the
Block parser class is instantiated with the global block. the block parser iterates over the global block line
and and parses them into objects according to their type. its main method is the readBlock method. At first it
parses the block into sections, each block beginning and ending with curly brackets. each block is added into
a queue to be read later. Then each block is read, by recursively  reading the line and adding the sub-blocks
into the queue. Each line is read and the line type is recognized. variables are kept and sent to the variable
factory. once a block becomes an object it is removed from the queue. after all the blocks have been
validated, the verifier has finished its run and "0" is printed.


=============================
=    Answers to questions   =
=============================
1) Handling s-Java code errors-

we implemented a class for such erros, called sJavaException. The class receives an argument specifying the
error, and throws an exception with the message explanation

2) How would you modify your code to add new types of variables (e.g float)?

if we were to add new types of variables, the main modification would be allowing additional cases in the
variable factory- adding more options to the SWITCH CASE (new regexes).
our code would be hard to modify in order support new types of variables, and in the course of the project we
learned for next time to try and make the code as modular as possible from the beginning, in order to support
changes and have a cohesive project.

3) For the following two features your program does not currently support, describe which
modifications/extensions you would have had to make in your code in order to support them. briefly describe
what classes you would add, which methods you would add to existing classes, and which classes you would
modify

different method types:
updating the validation of method signature and ending to include int/double/boolean and such (by updating the
regex). In addition, when verifying the method in the Method class, add a function that ensures that the type
of method matches the methods return value. (for example, a method int foo() must return a valid int), similar
to the way we ensured the variable type matches the type of value we wish to assign to the variable.


classes:
adding a new class called ClassBlock, representing the class object, with the following methods:
a method to verify the class signature is valid, using regexes. the variables of the class will be extracted
in a manner similar to their extraction for the method and condition blocks, during the parsing of blocks in
BlockParser. the switch method in blockParser will be modified to recognize the class signature and create a
class block object (adding a new case with a new regex matching the class signature). additional changes: a
method can be nested in the class as well as the global parent.


4) Describe two of the main regular expressions you used in your code

 "\\s*(final\\s+)?\\s*(int|double|String|boolean|char)\\s*(.*)(;)\\s*";
 - determines whether the line is a variable signature


 "\\s*(void)\\s+([a-zA-Z]\\w*)\\s*\\((.*)\\)\\s*\\{\\s*";
 - determines whether the line is a method signature






